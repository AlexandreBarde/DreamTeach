<?php

namespace App\Controller;


use App\Entity\Session;
use App\Entity\Student;
use App\Entity\Training;
use App\Form\CheckPasswordSession;
use App\Form\UploadPicture;
use Doctrine\Common\Persistence\ObjectManager;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use App\Entity\Badge;

/**
 * Class StudentController
 * @package App\Controller
 * @IsGranted("ROLE_USER")
 */
class ProfileController extends Controller
{
    /**
     * @Route("/deleteProfile", name="deleteProfile")
     * @IsGranted("ROLE_USER")
     */
    public function deleteProfile()
    {
        $repository = $this->getDoctrine()->getRepository(Student::class);
        $user = $repository->find($this->getUser()->getId());

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->remove($user);
        $entityManager->flush();

        return $this->render("empty.html.twig");
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function checkSessionPassword(){}

    /**
     * Permet d'ajouter la séance idSession à l'utilisateur connecté
     * @Route("/accueil/addSession/{idSession}", name="AddSession")
     * @param $idSession
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function addSession(Request $request, Session $idSession)
    {
        //TODO : Gérer les erreurs
        if($request->get('password'))
        {
           $correctPassword = $idSession->getPassword();
           if($correctPassword == $request->get('password'))
           {
               $student = $this->getUser();
               $repository = $this->getDoctrine()->getRepository(Session::class);
               $session = $repository->find($idSession);
               $student->addSessionid($session);
               $em = $this->getDoctrine()->getManager();
               $em->persist($student);
               $em->flush();
               /* Ajout du badge  */
               $badge = $this->getDoctrine()->getRepository(Badge::class)->find(2);
               $this->get('ajout_badge')->addBadge($this->getUser(),$badge);
               $this->get('xp_won')->wonXp($this->getUser(),50);
               return $this->redirectToRoute("showSessions");
           }
           else
           {
               $this->addFlash("info", "Mot de passe incorrect !");
               return $this->render("session.password.html.twig", ["session" => $idSession]);
           }
           exit();
        }
        $repository = $this->getDoctrine()->getRepository(Session::class);
        /** @var Session $session */
        $session = $repository->find($idSession);
        if($session->getPassword() != "")
        {
            $form = $this->createForm(CheckPasswordSession::class, $session);
            $form->handleRequest($request);
            if($form->isSubmitted() && $form->isValid())
            {
               $data = $form->getData();
               dump($data);exit;
            }
              return $this->render("session.password.html.twig", ["session" => $session, 'form' => $form->createView()]);

        }


        /** @var Student $student */
        $student = $this->getUser();
        /** @var Session $listeSession */
        $listeSession = $student->getSessionid();

        $tmp = array();
        $listeSessionEtudiant = array();

        // On parcourt les séances auxquelles l'utilisateur est déjà inscrit
        foreach($listeSession as $session)
        {
            // On ajoute les séances
            array_push($tmp, $session->getId());
        }

        foreach ($tmp as $ss)
        {
            // On ajoute les ID des sessions
            array_push($listeSessionEtudiant, $ss);
        }

        if(in_array($idSession->getId(),$listeSessionEtudiant))
        {
            die("c'est déjà dans ton agenda");
        }
        else
        {
            $repository = $this->getDoctrine()->getRepository(Session::class);
            $session = $repository->find($idSession);
            $student->addSessionid($session);
            $em = $this->getDoctrine()->getManager();
            $em->persist($student);
            $em->flush();
            /* Ajout du badge  */
            $badge = $this->getDoctrine()->getRepository(Badge::class)->find(2);
            $this->get('ajout_badge')->addBadge($this->getUser(),$badge);
            $this->get('xp_won')->wonXp($this->getUser(),50);
            return $this->redirectToRoute("showSessions");
        }
    }

    /**
     * Permet de supprimer la séance idSession de l'utilisateur connecté
     * @Route("/accueil/removeSession/{idSession}", name="RemoveSession")
     * @param $idSession
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    public function removeSession($idSession)
    {
        /** @var Student $student */
        $student = $this->getUser();
        /** @var Session $listeSession */
        $listeSession = $student->getSessionid();

        $tmp = array();
        $listeSessionEtudiant = array();

        // On parcourt les séances auxquelles l'utilisateur est déjà inscrit
        foreach($listeSession as $session)
        {
            // On ajoute les séances
            array_push($tmp, $session->getId());
        }

        foreach ($tmp as $ss)
        {
            // On ajoute les ID des sessions
            array_push($listeSessionEtudiant, $ss);
        }

        if(in_array($idSession,$listeSessionEtudiant))
        {
            // On supprime
            $repository = $this->getDoctrine()->getRepository(Session::class);
            /** @var Session $session */
            $session = $repository->find($idSession);
            $student->removeSessionid($session);
            $em = $this->getDoctrine()->getManager();
            $em->persist($student);
            $em->flush();
            return $this->redirectToRoute("showSessions");
        }
        else
        {
            die("Ce n'est pas dans ton agenda !");
        }
    }

}