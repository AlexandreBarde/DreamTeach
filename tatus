[1mdiff --git a/DreamTeach/.env b/DreamTeach/.env[m
[1mindex f3b8897..865ef84 100644[m
[1m--- a/DreamTeach/.env[m
[1m+++ b/DreamTeach/.env[m
[36m@@ -24,7 +24,7 @@[m [mAPP_SECRET=064ac23fe34c585bd63c13663fc7beec[m
 # Format described at http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url[m
 # For an SQLite database, use: "sqlite:///%kernel.project_dir%/var/data.db"[m
 # Configure your db driver and server_version in config/packages/doctrine.yaml[m
[31m-DATABASE_URL=mysql://db_user:db_password@127.0.0.1:3306/db_name[m
[32m+[m[32mDATABASE_URL=mysql://root:@127.0.0.1:3306/dreamteach[m
 ###< doctrine/doctrine-bundle ###[m
 [m
 ###> symfony/swiftmailer-bundle ###[m
[1mdiff --git a/DreamTeach/src/Controller/DefaultController.php b/DreamTeach/src/Controller/DefaultController.php[m
[1mindex fe123e2..1782e05 100644[m
[1m--- a/DreamTeach/src/Controller/DefaultController.php[m
[1m+++ b/DreamTeach/src/Controller/DefaultController.php[m
[36m@@ -6,6 +6,7 @@[m [mnamespace App\Controller;[m
 use App\Entity\School;[m
 use App\Entity\Student;[m
 use App\Entity\Training;[m
[32m+[m[32muse App\Form\RegisterType;[m
 use Doctrine\Common\Persistence\ObjectManager;[m
 use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;[m
 use Symfony\Component\HttpFoundation\Request;[m
[36m@@ -36,60 +37,25 @@[m [mclass DefaultController extends AbstractController[m
     /**[m
      * @Route("/register", name="register")[m
      */[m
[31m-    public function register()[m
[32m+[m[32m    public function register(Request $request)[m
     {[m
[31m-        return $this->render("register.html.twig");[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * @Route("/registerCheck", name="RegisterCheck")[m
[31m-     * @param Request $request[m
[31m-     * @param ObjectManager $manager[m
[31m-     * @param UserPasswordEncoderInterface $encoder[m
[31m-     * @return \Symfony\Component\HttpFoundation\Response[m
[31m-     */[m
[31m-    public function registerCheck(Request $request, ObjectManager $manager, UserPasswordEncoderInterface $encoder)[m
[31m-    {[m
[31m-        $currentUser = $this->getUser();[m
[31m-        if($currentUser === null)[m
[31m-        {[m
[31m-            if($request->request->get('lastname'))[m
[31m-            {[m
[31m-                $user = new Student();[m
[31m-                $user->setEmailaddress($request->request->get('emailaddress'));[m
[31m-                $user->setPassword($request->request->get('password'));[m
[31m-                $user->setFirstname($request->request->get('firstname'));[m
[31m-                $user->setLastname($request->request->get('lastname'));[m
[31m-                $user->setBiography("");[m
[31m-                $user->setAvatar("");[m
[31m-                $user->setXpwon("0");[m
[32m+[m[32m        $student = new Student();[m
 [m
[31m-                $school = new School();[m
[31m-                $school->setAddress("123 rue des roses");[m
[31m-                $school->setCity("Toulouse");[m
[31m-                $school->setName("Ã‰cole");[m
[31m-                $school->setPostalcode("31000");[m
[32m+[m[32m        $form = $this->createForm(RegisterType::class, $student);[m
[32m+[m[32m        $form->handleRequest($request);[m
 [m
[31m-                $manager->persist($school);[m
[31m-[m
[31m-                $training = new Training();[m
[31m-                $training->setDuration(0);[m
[31m-                $training->setTitle("Nom");[m
[31m-                $training->setSchoolid($school);[m
[31m-[m
[31m-                $manager->persist($training);[m
[31m-[m
[31m-                $user->setTrainingid($training);[m
[31m-                /* TODO : Faire que la biographie & avatar puisse Ãªtre nulle lors de la crÃ©ation */[m
[31m-[m
[31m-                $hash = $encoder->encodePassword($user, $user->getPassword());[m
[31m-                $user->setPassword($hash);[m
[31m-                